{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.jsx","Components/Arena/index.jsx","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","getCharacters","a","console","log","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","fetchNFTMetadata","provider","txn","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b85edc6d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0x2b5989F02D53d33bd2ABCDe03075C33b650d8C0a';\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      setMintingCharacter(true);\n      if (gameContract) {\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn:', mintTxn);\n      }\n      setMintingCharacter(false);\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      setMintingCharacter(false);\n    }\n  };\n\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n\n    /*\n    * Add a callback method that will fire when this event is received\n    */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      /*\n      * Once our character NFT is minted we can fetch the metadata from our contract\n      * and set it in state to move onto the Arena\n      */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      /*\n      * Setup NFT Minted Listener\n      */\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      /*\n      * When your component unmounts, let;s make sure to clean up this listener\n      */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  useEffect(() => {\n    const { ethereum } = window;\n  \n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n  \n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\nimport LoadingIndicator from '../LoadingIndicator';\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState('');\n  const [showToast, setShowToast] = useState(false);\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  // UseEffects\n  useEffect(() => {\n    const fetchBoss = async () => {\n        const bossTxn = await gameContract.getBigBoss();\n        console.log('Boss:', bossTxn);\n        setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n    * Setup logic when this event is fired off\n    */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n        const bossHp = newBossHp.toNumber();\n        const playerHp = newPlayerHp.toNumber();\n\n        console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n        /*\n        * Update both player and boss Hp\n        */\n        setBoss((prevState) => {\n            return { ...prevState, hp: bossHp };\n        });\n\n        setCharacterNFT((prevState) => {\n            return { ...prevState, hp: playerHp };\n        });\n    };\n\n    if (gameContract) {\n        fetchBoss();\n        gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    /*\n    * Make sure to clean up this event when this component is removed\n    */\n    return () => {\n        if (gameContract) {\n            gameContract.off('AttackComplete', onAttackComplete);\n        }\n    }\n  }, [gameContract]);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn);\n        setAttackState('hit');\n      }\n\n      setShowToast(true);\n      setTimeout(() => {\n        setShowToast(false);\n      }, 5000);\n\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  };\n\n  return (\n    <div className=\"arena-container\">\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? 'show' : ''}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n      {/* Replace your Boss UI with this */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {attackState === 'attacking' && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n  \n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;","import { ethers } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\n\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGame from './utils/MyEpicGame.json';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n        setIsLoading(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    /*\n    * Scenario #1\n    */\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n      /*\n      * Scenario #2\n      */\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n  \n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n  \n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n\n      setIsLoading(false);\n    };\n  \n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ GODWAR Metaverse ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {/* This is where our button and image code used to be!\n           *\tRemember we moved it into the render method.\n           */}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}